<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Regex</title>
<link href="/a/css/styles.css" rel="stylesheet" type="text/css" />
</head>

<body>
<h1>Regex</h1>
<h2>URL Rewriting</h2>
<p>Rewrite и redirect — это не одно и тоже, но операции часто выполняются вместе. Сначала в .htaccess создаютсян овые правила для URL, затем запросы перенаправляются.</p>
<p><code>RewriteRule   ^horses/?$   Xu8JuefAtua.html [NC]</code></p>
<p>Первое значение — новый URL, который используется в HTML, по которому переходит пользователь; второе — исходный URL, который сгенерировала CMS <strong>или предыдущий псевдоним</strong>. То есть Апач смотрит сначала, что ввел пользователь, а потом — какому адресу это соответствует в CMS.</p>
<ul>
<li><code>^</code> — ограничивает строку в начале. В правилах URL Rewriting не учитывается доменное имя и первый слэш после него. Таким образом этот символ фактически заменяет <code>http://www.example.com</code></li>
<li><code>?</code> — Знак вопроса указывает на то, что мог ввести предыдущий символ, а мог и не ввести. То есть, если пользователь наберет <code>www.example.com/horses/</code> или <code>www.example.com/horses</code>, он попадет на одну и туже страницу.</li>
<li><code>$</code> — ограничивает строку в конце. Если после необязательного слэшапользователь наберет что-то еще он не попадет на страницу, которую CMS обозвала<code> Xu8JuefAtua.html</code> .</li>
<li>[NC] — Флаг, означающий, нечувствительность к регистру. В данном случае, если пользователь введет HoRsEs, то всё равно попадет на нужную страницу.</li>
</ul>
<p><code>RewriteRule   ^wiki/(.+)$   w/index.php?title=$1   [L]</code></p>
<ul>
<li><code>+</code> — означает сколько угодно предыдущих символов</li>
<li>точка означет любой символ. То есть точка с плюсом — сколько угодно символов.</li>
<li>() — круглые скобки сохраняют заключенный в них фрагмент в «локальную переменную» под номером 1. В правой части правила, в исходном URL она используется, чтобы извлечь значение параметра title. Иными словами правило указывает параметру запомнить то, что пользователь ввел после wiki/ и найти в базе страницу, где эта строка использвуется в качестве заголовка страницы.</li>
<li><code>[L]</code> — флаг <code>[L]</code> означает окончание правила — в независимости от результата поиска, дальше искать URL, описанный в левой части правила, не нужно.</li>
</ul>
<p><code>RewriteRule  ^products/.*/([0-9]+)$   diy/jsp/bq/nav.jsp?action=detail&amp;fh_secondid=$1 [NC,L]</code></p>
<ul>
<li>.* — всё (любая последовательность символов) или ничего</li>
<li><code>[0-9]</code> — либая цифра</li>
<li><code>[0-9]+</code> — любо число — и однозначное и многозначное</li>
</ul>
<h3>Условные правила</h3>
<pre>RewriteCond   %{HTTP_HOST}   !^www.mywebsite.com$         [NC]
RewriteRule   (.*)           http://www.mywebsite.com/$1  [L,R=301]</pre>
<p>Можно сделать так, чтобы правила (<code>RewriteRule</code>) выполнялись только при определенных условиях (<code>RewriteCond</code>). </p>
<ul>
<li>%{…} — переменная Апач. В примере условие соблюдается, если переменная HTTP_HOST (доменное имя) не является (!) www.mywebsite.com. Тогда апач запоминает что пользователь ввел после доменного имени, и ищет старый URLс той же строкой но начинающийся на <code>www.mywebsite.com</code>.</li>
<li><code>[L,R=301]</code> — флаги, флаг <code>[R=301]</code> означает постоянный редирект 301. Флаги <code>[R]</code> или <code>[R=302]</code> означают временный редирект.</li>
</ul>
<pre>RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]</pre>
<ul>
<li>!-f — не файл </li>
<li>!-d — не директория</li>
</ul>
<p>В данном примере, если пользователь набирает что-нибудь, кроме адреса-пути к файлу или существующего адреса директории, для него будет открываться страница <code>index.php</code>.</p>
<pre>
RewriteCond %{QUERY_STRING} ^id=20$
RewriteRule ^prod.php$ ^products/great-product/2342$ [L,R=301]
RewriteRule ^products/(.*)/([0-9]+)$ ^productview.php?id=$1 [L]</pre>
<ul>
<li><code>%{QUERY_STRING}</code> — переменная, содержащая параметры URL</li>
<li>В первом правиле примера,  старый псевдоним URL, содержащий строку <code>prod.php</code> и параметр <code>id=20</code> (не обязательно следующий сразу за знаком вопроса), переписывается в новый псевдоним <code>products/great-product/2342</code>. Затем, во втором правиле  по новому псевдониму открывается страница фактическая страница продукта <code>productview.php?</code> и т.д.</li>
</ul>
<p><strong>В URL-ах крупных порталов нужно оставлять уникальный цифровой ID</strong> — great-productо-в может быть десятки наименований, на всех не хватит комбинаций ключевых слов и фантазии в целом.</p>
</body>
</html>