<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Промо-страница на Facebook</title>
<link href="/a/css/styles.css" rel="stylesheet" type="text/css" />
<style type="text/css">
BODY { width: 640px}
IMG { display: inline-block}
</style>
</head>

<body>
<h1>PHP-приложение. Введение</h1>
<p>При создании PHP-приложений прогрессинвые программисты используют концепцию <strong>Model-view-controller</strong> (<strong>MVC</strong>, «Модель-представление-поведение», «Модель-представление-контроллер»). По этой схеме программа разделяется на три части — модель данных, пользовательский интерфейс и взаимодействие с пользователем — так, чтобы изменение одного из компонентов оказывало минимальное  воздействие на остальные (вроде, как HTML и CSS).</p>
<p><img src="/a/img/design-n-development/mvc.png" alt="" />
</p>
<p>Пользователь вводит или запрашивает данные (открывает страницу). Эти действия регистрируются контроллером — первым программным блоком. Контроллер передает сигнал в модель — программный блок  (база данных и код для ее обработки), ответственный за хранение и изменение содержания. Затем контроллер создает нужное представление (в общем случае — страницу), которое возвращается пользователю.</p>
<p>Помимо концепции для создания приложений испоользуются уже готовые программыне решения —  шаблонные библиотеки (компилирующие обработчики шаблонов; шаблонизаторы). Такие, как <a href="http://twig.kron0s.com/" target="_blank">Twig</a>.</p>
</body>
</html>